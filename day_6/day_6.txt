#program to create  and access an object
class abc:
    attribute=10
obj=abc()
print(obj.attribute)

10

#program to create self arg  and access an object
class abc:#2
    attribute=10#3
    def display(self):#6
        print('this is in class')#7        
obj=abc()#1
print(obj.attribute)#4
obj.display()#5'''

10
this is in class

# constructor
class abc:
    def __init__(self,value):
        print('this is in class')
        self.value=value
        print('the value is ',value)

this is in classs
the value is 10

class abc:
    class_var=0
    def __init__(self,var):
        abc.class_var+=1
        self.var=var
        print('the obj value is ', var)
        print('the class value is ',abc.class_var)
obj1=abc(100)
obj2=abc(102)
obj3=abc(103)

the obj value is  100
the class value is  1
the obj value is  102
the class value is  2
the obj value is  103
the class value is  3


obj=abc(100)write a program to check whether the given number is even or odd by using single stance class object with an attribute 
class number:
    even=0
    def check(self,num):
        if num%2==0:
            self.even=1
    def even_odd(self,num):
        self.check(num)
        if self.even==1:
            print(num,'is even')
        else:
            print(num,'is odd')
n=number()
n.even_odd(21)

21 is odd

class number:
    even=[]
    odd=[]
    def __init__(self,num):
        self.num=num
        if num%2==0:
            number.even.append(num)
        else:
             number.odd.append(num)
n1=number(11)
n2=number(12)
n3=number(13)
n4=number(14)
n5=number(15)
print('even number list is',number.even)
print('odd number list is',number.odd)

even number list is [12, 14]
odd number list is [11, 13, 15]

write a program that has a class named circle use a classs variable to define the values of constant pi.use this class varible to calculate the area amd circumference of the circle with specify radius where radius=7.5

class circle:
    pi=3.14159
    def __init__(self,r):
        self.r=r
    def area(self):
        return circle.pi *self.r*self.r
    def circum(self):
        return 2*circle.pi*self.r
c=circle(7.5)
print('area=',c.area())
print('circumference=',c.circum())


area= 176.7144375
circumference= 47.12385

tic tac toe


board=[['','',''],['','',''],['','','']]
def print_board(board):
    print(*board[0],sep="|")
    print('------------')
    print(*board[1],sep="|")
    print('------------')
    print(*board[2],sep="|")
    print('------------')
def get_markers():
    marker1=input('Player 1 choice X or O:').upper()
    marker2=""
    if marker1=='X':
        marker='O'
        return['X','O']
    elif marker1=='O':
        marker2='X'
        return['O','X']
    else:
        print('Invalid input')
        return get_marker()
def get_coordinates():
    x,y=list(map(int,input('enter the coordinates:').split()))
    if x in [0,1,2] and y in [0,1,2]:
        return[x,y]
    else:
        print('Invalid input')
        return get_coordinates()
def check_for_win(board):
    for row in board:
        if row[0]==row[1] and row[1]==row[2] and row[1]!="":
            return True
    for i in range(len(board)):
        if board[0][i]==board[1][i] and board[1][i]==board[2][i] and board[2][i]!="":
            return True
    if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[2][2]!="":
        return True
    if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[2][2]!="":
        return True
    return False
def update_board(board,chance,marker,x,y):
    if chance==True:
        board[x][y]=marker
        if check_for_win(board):
            print('player 1 wins')
            return "game over"
        return False
    else:
        board[x][y]=marker
        if check_for_win(board):
            print('player 2 wins')
            return "game over"
        return True
def play_game():
    player1=0
    player2=0
    m1,m2=get_markers()
    print(f'player1:{m1},player2:{m2}')
    chance=True
    while True:
        print_board(board)
        x,y=get_coordinates()
        if chance:
            chance=update_board(board,chance,m1,x,y)
            if chance=="game over":
                break
        else:
            chance=update_board(board,chance,m2,x,y)
            if chance=="game over":
                break
play_game()


Player 1 choice X or O:x
player1:X,player2:O
||
------------
||
------------
||
------------
enter the coordinates:1 1
||
------------
|X|
------------
||
------------
enter the coordinates:2 0
||
------------
|X|
------------
O||
------------
enter the coordinates:2 1
||
------------
|X|
------------
O|X|
------------
enter the coordinates:1 0
||
------------
O|X|
------------
O|X|
------------
enter the coordinates:0 1
player 1 wins


def findtotalcurtains(n,number):
    total=0
    for i in numbers:
        total+=i//12
    return total
n=int(input('size='))
numbers=list(map(int,input().split()))
print(findtotalcurtains(n,numbers))

size=5
3 42 60 6 14
9